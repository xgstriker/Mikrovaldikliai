
LD6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a4c  08004a4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a54  08004a54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000114  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c4a2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b5b  00000000  00000000  0002c521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cd0  00000000  00000000  0002e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a15  00000000  00000000  0002ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000202ae  00000000  00000000  0002f765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000efc2  00000000  00000000  0004fa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c75ee  00000000  00000000  0005e9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000036a4  00000000  00000000  00125fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00129668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a1c 	.word	0x08004a1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a1c 	.word	0x08004a1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fb35 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f817 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f955 	bl	8000780 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d6:	f000 f8a9 	bl	800062c <MX_I2C1_Init>
  MX_I2C2_Init();
 80004da:	f000 f8d5 	bl	8000688 <MX_I2C2_Init>
  MX_TIM2_Init();
 80004de:	f000 f901 	bl	80006e4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004e2:	f000 f877 	bl	80005d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x38>)
 80004e8:	f003 fe3c 	bl	8004164 <HAL_TIM_Base_Start_IT>
  uint8_t data_to_send = 0x0F;
 80004ec:	230f      	movs	r3, #15
 80004ee:	71fb      	strb	r3, [r7, #7]
//		  HAL_I2C_Master_Transmit(&hi2c1, 0xFA ,&data_to_send, 1, 1000);
//	  }
	 // HAL_I2C_Master_Transmit_IT(&hi2c1, 0xF0 ,&data_to_send, 1, 500);

	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	 HAL_Delay(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f000 fb92 	bl	8000c1c <HAL_Delay>
 80004f8:	e7fa      	b.n	80004f0 <main+0x2c>
 80004fa:	bf00      	nop
 80004fc:	200000d0 	.word	0x200000d0

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f004 fa58 	bl	80049c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000574:	2348      	movs	r3, #72	; 0x48
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f919 	bl	80037bc <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000590:	f000 f93a 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fb7a 	bl	8003cac <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005be:	f000 f923 	bl	8000808 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2022      	movs	r0, #34	; 0x22
 80005de:	f000 fc1c 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80005e2:	2022      	movs	r0, #34	; 0x22
 80005e4:	f000 fc35 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2021      	movs	r0, #33	; 0x21
 80005ee:	f000 fc14 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80005f2:	2021      	movs	r0, #33	; 0x21
 80005f4:	f000 fc2d 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2020      	movs	r0, #32
 80005fe:	f000 fc0c 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000602:	2020      	movs	r0, #32
 8000604:	f000 fc25 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	201f      	movs	r0, #31
 800060e:	f000 fc04 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000612:	201f      	movs	r0, #31
 8000614:	f000 fc1d 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	201c      	movs	r0, #28
 800061e:	f000 fbfc 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000622:	201c      	movs	r0, #28
 8000624:	f000 fc15 	bl	8000e52 <HAL_NVIC_EnableIRQ>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0xF0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	22f0      	movs	r2, #240	; 0xf0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f000 fdf3 	bl	8001254 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f8c8 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000028 	.word	0x20000028
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C2_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C2_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C2_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C2_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C2_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0xFA;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006a0:	22fa      	movs	r2, #250	; 0xfa
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C2_Init+0x50>)
 80006c6:	f000 fdc5 	bl	8001254 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f89a 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000007c 	.word	0x2000007c
 80006dc:	40005800 	.word	0x40005800
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM2_Init+0x98>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM2_Init+0x98>)
 800070a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800070e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM2_Init+0x98>)
 8000718:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800071c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_TIM2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TIM2_Init+0x98>)
 800072c:	f003 fcca 	bl	80040c4 <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000736:	f000 f867 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM2_Init+0x98>)
 8000748:	f003 fe6c 	bl	8004424 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000752:	f000 f859 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM2_Init+0x98>)
 8000764:	f004 f89e 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076e:	f000 f84b 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000d0 	.word	0x200000d0

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0x80>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_GPIO_Init+0x80>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_GPIO_Init+0x80>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_GPIO_Init+0x80>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a11      	ldr	r2, [pc, #68]	; (8000800 <MX_GPIO_Init+0x80>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_GPIO_Init+0x80>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0x84>)
 80007d6:	f000 fd23 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0x84>)
 80007f4:	f000 fb78 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020c00 	.word	0x40020c00

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <HAL_MspInit+0x4c>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x4c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000852:	2007      	movs	r0, #7
 8000854:	f000 fad6 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a32      	ldr	r2, [pc, #200]	; (800094c <HAL_I2C_MspInit+0xe8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12c      	bne.n	80008e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <HAL_I2C_MspInit+0xec>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a30      	ldr	r2, [pc, #192]	; (8000950 <HAL_I2C_MspInit+0xec>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <HAL_I2C_MspInit+0xec>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a2:	23c0      	movs	r3, #192	; 0xc0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a6:	2312      	movs	r3, #18
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b2:	2304      	movs	r3, #4
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4825      	ldr	r0, [pc, #148]	; (8000954 <HAL_I2C_MspInit+0xf0>)
 80008be:	f000 fb13 	bl	8000ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <HAL_I2C_MspInit+0xec>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a21      	ldr	r2, [pc, #132]	; (8000950 <HAL_I2C_MspInit+0xec>)
 80008cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <HAL_I2C_MspInit+0xec>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008de:	e031      	b.n	8000944 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <HAL_I2C_MspInit+0xf4>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d12c      	bne.n	8000944 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_I2C_MspInit+0xec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_I2C_MspInit+0xec>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_I2C_MspInit+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000906:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090c:	2312      	movs	r3, #18
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000918:	2304      	movs	r3, #4
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <HAL_I2C_MspInit+0xf0>)
 8000924:	f000 fae0 	bl	8000ee8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_I2C_MspInit+0xec>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_I2C_MspInit+0xec>)
 8000932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_I2C_MspInit+0xec>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	; 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40005400 	.word	0x40005400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40005800 	.word	0x40005800

0800095c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800096c:	d10d      	bne.n	800098a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_TIM_Base_MspInit+0x3c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_TIM_Base_MspInit+0x3c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_TIM_Base_MspInit+0x3c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f8f8 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
	 if(trans_var<4){
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <TIM2_IRQHandler+0x70>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d806      	bhi.n	8000a0c <TIM2_IRQHandler+0x1c>
	  trans_var ++;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <TIM2_IRQHandler+0x70>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <TIM2_IRQHandler+0x70>)
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e002      	b.n	8000a12 <TIM2_IRQHandler+0x22>
	  }else
	  {
		  trans_var = 1;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <TIM2_IRQHandler+0x70>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
	  }
	if(HAL_I2C_IsDeviceReady(&hi2c1,0xFA,1 ,1000)==HAL_OK){
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	2201      	movs	r2, #1
 8000a18:	21fa      	movs	r1, #250	; 0xfa
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <TIM2_IRQHandler+0x74>)
 8000a1c:	f000 fe72 	bl	8001704 <HAL_I2C_IsDeviceReady>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d116      	bne.n	8000a54 <TIM2_IRQHandler+0x64>
			  HAL_I2C_Master_Transmit(&hi2c1, 0xFA ,&trans_var, 1, 1000);
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <TIM2_IRQHandler+0x70>)
 8000a30:	21fa      	movs	r1, #250	; 0xfa
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <TIM2_IRQHandler+0x74>)
 8000a34:	f000 fd68 	bl	8001508 <HAL_I2C_Master_Transmit>
			//  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
			  GPIOD->ODR &= 0x00000000;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <TIM2_IRQHandler+0x78>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <TIM2_IRQHandler+0x78>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
			          GPIOD->ODR |= (trans_var << 12);
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <TIM2_IRQHandler+0x78>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <TIM2_IRQHandler+0x70>)
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0312      	lsls	r2, r2, #12
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <TIM2_IRQHandler+0x78>)
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6153      	str	r3, [r2, #20]
}


//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <TIM2_IRQHandler+0x7c>)
 8000a56:	f003 fbf5 	bl	8004244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000118 	.word	0x20000118
 8000a64:	20000028 	.word	0x20000028
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	200000d0 	.word	0x200000d0

08000a70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <I2C1_EV_IRQHandler+0x10>)
 8000a76:	f000 ff73 	bl	8001960 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000028 	.word	0x20000028

08000a84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <I2C1_ER_IRQHandler+0x10>)
 8000a8a:	f001 f8bc 	bl	8001c06 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000028 	.word	0x20000028

08000a98 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <I2C2_EV_IRQHandler+0x10>)
 8000a9e:	f000 ff5f 	bl	8001960 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000007c 	.word	0x2000007c

08000aac <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <I2C2_ER_IRQHandler+0x10>)
 8000ab2:	f001 f8a8 	bl	8001c06 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000007c 	.word	0x2000007c

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f003 ff5f 	bl	80049d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fcd5 	bl	80004c4 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b28:	08004a5c 	.word	0x08004a5c
  ldr r2, =_sbss
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b30:	20000120 	.word	0x20000120

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f94f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe52 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f967 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f92f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	2000011c 	.word	0x2000011c

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000011c 	.word	0x2000011c

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d004      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e00c      	b.n	8000ebe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ed8:	b2db      	uxtb	r3, r3
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e16b      	b.n	80011dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 815a 	bne.w	80011d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b4 	beq.w	80011d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a5b      	ldr	r2, [pc, #364]	; (80011f8 <HAL_GPIO_Init+0x310>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x320>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x324>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x328>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x32c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x330>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20a>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f2:	2308      	movs	r3, #8
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x310>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_GPIO_Init+0x334>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a32      	ldr	r2, [pc, #200]	; (800121c <HAL_GPIO_Init+0x334>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_GPIO_Init+0x334>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <HAL_GPIO_Init+0x334>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_GPIO_Init+0x334>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_GPIO_Init+0x334>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_GPIO_Init+0x334>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_GPIO_Init+0x334>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae90 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e12b      	b.n	80014be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff faf2 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2224      	movs	r2, #36	; 0x24
 8001284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012b8:	f002 fef0 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 80012bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a81      	ldr	r2, [pc, #516]	; (80014c8 <HAL_I2C_Init+0x274>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d807      	bhi.n	80012d8 <HAL_I2C_Init+0x84>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a80      	ldr	r2, [pc, #512]	; (80014cc <HAL_I2C_Init+0x278>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	bf94      	ite	ls
 80012d0:	2301      	movls	r3, #1
 80012d2:	2300      	movhi	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	e006      	b.n	80012e6 <HAL_I2C_Init+0x92>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a7d      	ldr	r2, [pc, #500]	; (80014d0 <HAL_I2C_Init+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	bf94      	ite	ls
 80012e0:	2301      	movls	r3, #1
 80012e2:	2300      	movhi	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0e7      	b.n	80014be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4a78      	ldr	r2, [pc, #480]	; (80014d4 <HAL_I2C_Init+0x280>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0c9b      	lsrs	r3, r3, #18
 80012f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	430a      	orrs	r2, r1
 800130c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_I2C_Init+0x274>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d802      	bhi.n	8001328 <HAL_I2C_Init+0xd4>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3301      	adds	r3, #1
 8001326:	e009      	b.n	800133c <HAL_I2C_Init+0xe8>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	4a69      	ldr	r2, [pc, #420]	; (80014d8 <HAL_I2C_Init+0x284>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	099b      	lsrs	r3, r3, #6
 800133a:	3301      	adds	r3, #1
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	430b      	orrs	r3, r1
 8001342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800134e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	495c      	ldr	r1, [pc, #368]	; (80014c8 <HAL_I2C_Init+0x274>)
 8001358:	428b      	cmp	r3, r1
 800135a:	d819      	bhi.n	8001390 <HAL_I2C_Init+0x13c>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1e59      	subs	r1, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fbb1 f3f3 	udiv	r3, r1, r3
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001370:	400b      	ands	r3, r1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00a      	beq.n	800138c <HAL_I2C_Init+0x138>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e59      	subs	r1, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fbb1 f3f3 	udiv	r3, r1, r3
 8001384:	3301      	adds	r3, #1
 8001386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138a:	e051      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 800138c:	2304      	movs	r3, #4
 800138e:	e04f      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d111      	bne.n	80013bc <HAL_I2C_Init+0x168>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1e58      	subs	r0, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	440b      	add	r3, r1
 80013a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	e012      	b.n	80013e2 <HAL_I2C_Init+0x18e>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1e58      	subs	r0, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	0099      	lsls	r1, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Init+0x196>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e022      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10e      	bne.n	8001410 <HAL_I2C_Init+0x1bc>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1e58      	subs	r0, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6859      	ldr	r1, [r3, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	440b      	add	r3, r1
 8001400:	fbb0 f3f3 	udiv	r3, r0, r3
 8001404:	3301      	adds	r3, #1
 8001406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140e:	e00f      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	0099      	lsls	r1, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	fbb0 f3f3 	udiv	r3, r0, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	6809      	ldr	r1, [r1, #0]
 8001434:	4313      	orrs	r3, r2
 8001436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69da      	ldr	r2, [r3, #28]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800145e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6911      	ldr	r1, [r2, #16]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68d2      	ldr	r2, [r2, #12]
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	430b      	orrs	r3, r1
 8001472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	000186a0 	.word	0x000186a0
 80014cc:	001e847f 	.word	0x001e847f
 80014d0:	003d08ff 	.word	0x003d08ff
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	10624dd3 	.word	0x10624dd3

080014dc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	2b80      	cmp	r3, #128	; 0x80
 80014f0:	d103      	bne.n	80014fa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff fb72 	bl	8000c04 <HAL_GetTick>
 8001520:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	f040 80e0 	bne.w	80016f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2319      	movs	r3, #25
 8001536:	2201      	movs	r2, #1
 8001538:	4970      	ldr	r1, [pc, #448]	; (80016fc <HAL_I2C_Master_Transmit+0x1f4>)
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f001 ff18 	bl	8003370 <I2C_WaitOnFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001546:	2302      	movs	r3, #2
 8001548:	e0d3      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_I2C_Master_Transmit+0x50>
 8001554:	2302      	movs	r3, #2
 8001556:	e0cc      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d007      	beq.n	800157e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2221      	movs	r2, #33	; 0x21
 8001592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2210      	movs	r2, #16
 800159a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	893a      	ldrh	r2, [r7, #8]
 80015ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_I2C_Master_Transmit+0x1f8>)
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015c0:	8979      	ldrh	r1, [r7, #10]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f001 fda8 	bl	800311c <I2C_MasterRequestWrite>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e08d      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015ec:	e066      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	6a39      	ldr	r1, [r7, #32]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f001 ffd6 	bl	80035a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00d      	beq.n	800161a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b04      	cmp	r3, #4
 8001604:	d107      	bne.n	8001616 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001614:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06b      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b04      	cmp	r3, #4
 8001656:	d11b      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x188>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d017      	beq.n	8001690 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	6a39      	ldr	r1, [r7, #32]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f001 ffcd 	bl	8003634 <I2C_WaitOnBTFFlagUntilTimeout>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d107      	bne.n	80016b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01a      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d194      	bne.n	80015ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e000      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
  }
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	00100002 	.word	0x00100002
 8001700:	ffff0000 	.word	0xffff0000

08001704 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af02      	add	r7, sp, #8
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	460b      	mov	r3, r1
 8001712:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fa76 	bl	8000c04 <HAL_GetTick>
 8001718:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	f040 8111 	bne.w	800194e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2319      	movs	r3, #25
 8001732:	2201      	movs	r2, #1
 8001734:	4988      	ldr	r1, [pc, #544]	; (8001958 <HAL_I2C_IsDeviceReady+0x254>)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f001 fe1a 	bl	8003370 <I2C_WaitOnFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001742:	2302      	movs	r3, #2
 8001744:	e104      	b.n	8001950 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_I2C_IsDeviceReady+0x50>
 8001750:	2302      	movs	r3, #2
 8001752:	e0fd      	b.n	8001950 <HAL_I2C_IsDeviceReady+0x24c>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d007      	beq.n	800177a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2224      	movs	r2, #36	; 0x24
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a70      	ldr	r2, [pc, #448]	; (800195c <HAL_I2C_IsDeviceReady+0x258>)
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f001 fdd8 	bl	8003370 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00d      	beq.n	80017e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d4:	d103      	bne.n	80017de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0b6      	b.n	8001950 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fa07 	bl	8000c04 <HAL_GetTick>
 80017f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b02      	cmp	r3, #2
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001826:	e025      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001828:	f7ff f9ec 	bl	8000c04 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d302      	bcc.n	800183e <HAL_I2C_IsDeviceReady+0x13a>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d103      	bne.n	8001846 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	22a0      	movs	r2, #160	; 0xa0
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b02      	cmp	r3, #2
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2ba0      	cmp	r3, #160	; 0xa0
 800187e:	d005      	beq.n	800188c <HAL_I2C_IsDeviceReady+0x188>
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_I2C_IsDeviceReady+0x188>
 8001886:	7dbb      	ldrb	r3, [r7, #22]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0cd      	beq.n	8001828 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d129      	bne.n	80018f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2319      	movs	r3, #25
 80018ce:	2201      	movs	r2, #1
 80018d0:	4921      	ldr	r1, [pc, #132]	; (8001958 <HAL_I2C_IsDeviceReady+0x254>)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f001 fd4c 	bl	8003370 <I2C_WaitOnFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e036      	b.n	8001950 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e02c      	b.n	8001950 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001904:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800190e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2319      	movs	r3, #25
 8001916:	2201      	movs	r2, #1
 8001918:	490f      	ldr	r1, [pc, #60]	; (8001958 <HAL_I2C_IsDeviceReady+0x254>)
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f001 fd28 	bl	8003370 <I2C_WaitOnFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e012      	b.n	8001950 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	3301      	adds	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	f4ff af32 	bcc.w	800179e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800194e:	2302      	movs	r3, #2
  }
}
 8001950:	4618      	mov	r0, r3
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	00100002 	.word	0x00100002
 800195c:	ffff0000 	.word	0xffff0000

08001960 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001980:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	2b10      	cmp	r3, #16
 800198e:	d003      	beq.n	8001998 <HAL_I2C_EV_IRQHandler+0x38>
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b40      	cmp	r3, #64	; 0x40
 8001994:	f040 80b1 	bne.w	8001afa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10d      	bne.n	80019ce <HAL_I2C_EV_IRQHandler+0x6e>
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80019b8:	d003      	beq.n	80019c2 <HAL_I2C_EV_IRQHandler+0x62>
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_EV_IRQHandler+0x66>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_I2C_EV_IRQHandler+0x68>
 80019c6:	2300      	movs	r3, #0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	f000 8114 	beq.w	8001bf6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00b      	beq.n	80019f0 <HAL_I2C_EV_IRQHandler+0x90>
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f001 fecf 	bl	8003786 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fd7a 	bl	80024e2 <I2C_Master_SB>
 80019ee:	e083      	b.n	8001af8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_I2C_EV_IRQHandler+0xac>
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fdf2 	bl	80025ee <I2C_Master_ADD10>
 8001a0a:	e075      	b.n	8001af8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_I2C_EV_IRQHandler+0xc8>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fe0e 	bl	8002642 <I2C_Master_ADDR>
 8001a26:	e067      	b.n	8001af8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d036      	beq.n	8001aa0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a40:	f000 80db 	beq.w	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00d      	beq.n	8001a6a <HAL_I2C_EV_IRQHandler+0x10a>
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_I2C_EV_IRQHandler+0x10a>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f9d6 	bl	8001e14 <I2C_MasterTransmit_TXE>
 8001a68:	e046      	b.n	8001af8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80c2 	beq.w	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80bc 	beq.w	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	2b21      	cmp	r3, #33	; 0x21
 8001a86:	d103      	bne.n	8001a90 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fa5f 	bl	8001f4c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a8e:	e0b4      	b.n	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b40      	cmp	r3, #64	; 0x40
 8001a94:	f040 80b1 	bne.w	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 facd 	bl	8002038 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a9e:	e0ac      	b.n	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aae:	f000 80a4 	beq.w	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x178>
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x178>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fb49 	bl	8002168 <I2C_MasterReceive_RXNE>
 8001ad6:	e00f      	b.n	8001af8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 808b 	beq.w	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8085 	beq.w	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fc01 	bl	80022f8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af6:	e080      	b.n	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
 8001af8:	e07f      	b.n	8001bfa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e007      	b.n	8001b1c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d011      	beq.n	8001b4a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001b40:	69b9      	ldr	r1, [r7, #24]
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 ffcc 	bl	8002ae0 <I2C_Slave_ADDR>
 8001b48:	e05a      	b.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_I2C_EV_IRQHandler+0x206>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f001 f806 	bl	8002b70 <I2C_Slave_STOPF>
 8001b64:	e04c      	b.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	2b21      	cmp	r3, #33	; 0x21
 8001b6a:	d002      	beq.n	8001b72 <HAL_I2C_EV_IRQHandler+0x212>
 8001b6c:	7bbb      	ldrb	r3, [r7, #14]
 8001b6e:	2b29      	cmp	r3, #41	; 0x29
 8001b70:	d120      	bne.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00d      	beq.n	8001b98 <HAL_I2C_EV_IRQHandler+0x238>
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_I2C_EV_IRQHandler+0x238>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d103      	bne.n	8001b98 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fee7 	bl	8002964 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b96:	e032      	b.n	8001bfe <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d02d      	beq.n	8001bfe <HAL_I2C_EV_IRQHandler+0x29e>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d028      	beq.n	8001bfe <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 ff16 	bl	80029de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bb2:	e024      	b.n	8001bfe <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00d      	beq.n	8001bda <HAL_I2C_EV_IRQHandler+0x27a>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_I2C_EV_IRQHandler+0x27a>
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 ff24 	bl	8002a20 <I2C_SlaveReceive_RXNE>
 8001bd8:	e012      	b.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 ff54 	bl	8002a9c <I2C_SlaveReceive_BTF>
 8001bf4:	e004      	b.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001bf6:	bf00      	nop
 8001bf8:	e002      	b.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bfa:	bf00      	nop
 8001bfc:	e000      	b.n	8001c00 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bfe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08a      	sub	sp, #40	; 0x28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c28:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00d      	beq.n	8001c50 <HAL_I2C_ER_IRQHandler+0x4a>
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00d      	beq.n	8001c76 <HAL_I2C_ER_IRQHandler+0x70>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001c74:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d03e      	beq.n	8001cfe <HAL_I2C_ER_IRQHandler+0xf8>
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d039      	beq.n	8001cfe <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001c8a:	7efb      	ldrb	r3, [r7, #27]
 8001c8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001ca4:	7ebb      	ldrb	r3, [r7, #26]
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d112      	bne.n	8001cd0 <HAL_I2C_ER_IRQHandler+0xca>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10f      	bne.n	8001cd0 <HAL_I2C_ER_IRQHandler+0xca>
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
 8001cb2:	2b21      	cmp	r3, #33	; 0x21
 8001cb4:	d008      	beq.n	8001cc8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001cb6:	7cfb      	ldrb	r3, [r7, #19]
 8001cb8:	2b29      	cmp	r3, #41	; 0x29
 8001cba:	d005      	beq.n	8001cc8 <HAL_I2C_ER_IRQHandler+0xc2>
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	2b28      	cmp	r3, #40	; 0x28
 8001cc0:	d106      	bne.n	8001cd0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b21      	cmp	r3, #33	; 0x21
 8001cc6:	d103      	bne.n	8001cd0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f001 f881 	bl	8002dd0 <I2C_Slave_AF>
 8001cce:	e016      	b.n	8001cfe <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cd8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ce2:	7efb      	ldrb	r3, [r7, #27]
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d002      	beq.n	8001cee <HAL_I2C_ER_IRQHandler+0xe8>
 8001ce8:	7efb      	ldrb	r3, [r7, #27]
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d107      	bne.n	8001cfe <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <HAL_I2C_ER_IRQHandler+0x11e>
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001d22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f001 f8be 	bl	8002eb8 <I2C_ITError>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
 8001da0:	4613      	mov	r3, r2
 8001da2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d150      	bne.n	8001edc <I2C_MasterTransmit_TXE+0xc8>
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b21      	cmp	r3, #33	; 0x21
 8001e3e:	d14d      	bne.n	8001edc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d01d      	beq.n	8001e82 <I2C_MasterTransmit_TXE+0x6e>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d01a      	beq.n	8001e82 <I2C_MasterTransmit_TXE+0x6e>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e52:	d016      	beq.n	8001e82 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e62:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2211      	movs	r2, #17
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff62 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e80:	e060      	b.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e90:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b40      	cmp	r3, #64	; 0x40
 8001eba:	d107      	bne.n	8001ecc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff7d 	bl	8001dc4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001eca:	e03b      	b.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff35 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001eda:	e033      	b.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2b21      	cmp	r3, #33	; 0x21
 8001ee0:	d005      	beq.n	8001eee <I2C_MasterTransmit_TXE+0xda>
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d12d      	bne.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b22      	cmp	r3, #34	; 0x22
 8001eec:	d12a      	bne.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f06:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001f08:	e01c      	b.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d103      	bne.n	8001f1e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f88e 	bl	8002038 <I2C_MemoryTransmit_TXE_BTF>
}
 8001f1c:	e012      	b.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f42:	e7ff      	b.n	8001f44 <I2C_MasterTransmit_TXE+0x130>
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b21      	cmp	r3, #33	; 0x21
 8001f64:	d164      	bne.n	8002030 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d012      	beq.n	8001f96 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001f94:	e04c      	b.n	8002030 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d01d      	beq.n	8001fd8 <I2C_MasterTransmit_BTF+0x8c>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d01a      	beq.n	8001fd8 <I2C_MasterTransmit_BTF+0x8c>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fa8:	d016      	beq.n	8001fd8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2211      	movs	r2, #17
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff feb7 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
}
 8001fd6:	e02b      	b.n	8002030 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fe6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b40      	cmp	r3, #64	; 0x40
 8002010:	d107      	bne.n	8002022 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fed2 	bl	8001dc4 <HAL_I2C_MemTxCpltCallback>
}
 8002020:	e006      	b.n	8002030 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fe8a 	bl	8001d44 <HAL_I2C_MasterTxCpltCallback>
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002046:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11d      	bne.n	800208c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d10b      	bne.n	8002070 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	b2da      	uxtb	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002068:	1c9a      	adds	r2, r3, #2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800206e:	e077      	b.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	b29b      	uxth	r3, r3
 8002076:	121b      	asrs	r3, r3, #8
 8002078:	b2da      	uxtb	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	651a      	str	r2, [r3, #80]	; 0x50
}
 800208a:	e069      	b.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10b      	bne.n	80020ac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	b2da      	uxtb	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020aa:	e059      	b.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d152      	bne.n	800215a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b22      	cmp	r3, #34	; 0x22
 80020b8:	d10d      	bne.n	80020d6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020d4:	e044      	b.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d015      	beq.n	800210c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b21      	cmp	r3, #33	; 0x21
 80020e4:	d112      	bne.n	800210c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800210a:	e029      	b.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d124      	bne.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b21      	cmp	r3, #33	; 0x21
 800211a:	d121      	bne.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800212a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fe36 	bl	8001dc4 <HAL_I2C_MemTxCpltCallback>
}
 8002158:	e002      	b.n	8002160 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff f9be 	bl	80014dc <I2C_Flush_DR>
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b22      	cmp	r3, #34	; 0x22
 800217a:	f040 80b9 	bne.w	80022f0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d921      	bls.n	80021d6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b03      	cmp	r3, #3
 80021c0:	f040 8096 	bne.w	80022f0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80021d4:	e08c      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d07f      	beq.n	80022de <I2C_MasterReceive_RXNE+0x176>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d002      	beq.n	80021ea <I2C_MasterReceive_RXNE+0x82>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d179      	bne.n	80022de <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f001 fa6a 	bl	80036c4 <I2C_WaitOnSTOPRequestThroughIT>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d14c      	bne.n	8002290 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002204:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002214:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d10a      	bne.n	8002266 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff fdba 	bl	8001dd8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002264:	e044      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d002      	beq.n	800227a <I2C_MasterReceive_RXNE+0x112>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b20      	cmp	r3, #32
 8002278:	d103      	bne.n	8002282 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
 8002280:	e002      	b.n	8002288 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2212      	movs	r2, #18
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fd65 	bl	8001d58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800228e:	e02f      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800229e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fd88 	bl	8001dec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80022dc:	e008      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ec:	605a      	str	r2, [r3, #4]
}
 80022ee:	e7ff      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x188>
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b04      	cmp	r3, #4
 800230e:	d11b      	bne.n	8002348 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002346:	e0c8      	b.n	80024da <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d129      	bne.n	80023a6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00a      	beq.n	800237e <I2C_MasterReceive_BTF+0x86>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d007      	beq.n	800237e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023a4:	e099      	b.n	80024da <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	f040 8081 	bne.w	80024b4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d002      	beq.n	80023be <I2C_MasterReceive_BTF+0xc6>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d108      	bne.n	80023d0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e019      	b.n	8002404 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d002      	beq.n	80023dc <I2C_MasterReceive_BTF+0xe4>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d108      	bne.n	80023ee <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e00a      	b.n	8002404 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d007      	beq.n	8002404 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002402:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800245e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d10a      	bne.n	800248a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fca8 	bl	8001dd8 <HAL_I2C_MemRxCpltCallback>
}
 8002488:	e027      	b.n	80024da <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d002      	beq.n	800249e <I2C_MasterReceive_BTF+0x1a6>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b20      	cmp	r3, #32
 800249c:	d103      	bne.n	80024a6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
 80024a4:	e002      	b.n	80024ac <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2212      	movs	r2, #18
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fc53 	bl	8001d58 <HAL_I2C_MasterRxCpltCallback>
}
 80024b2:	e012      	b.n	80024da <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d117      	bne.n	8002526 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800250e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002510:	e067      	b.n	80025e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	611a      	str	r2, [r3, #16]
}
 8002524:	e05d      	b.n	80025e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800252e:	d133      	bne.n	8002598 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b21      	cmp	r3, #33	; 0x21
 800253a:	d109      	bne.n	8002550 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	e008      	b.n	8002562 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <I2C_Master_SB+0x92>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	2b00      	cmp	r3, #0
 800257a:	d032      	beq.n	80025e2 <I2C_Master_SB+0x100>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d02d      	beq.n	80025e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002594:	605a      	str	r2, [r3, #4]
}
 8002596:	e024      	b.n	80025e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10e      	bne.n	80025be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	11db      	asrs	r3, r3, #7
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0306 	and.w	r3, r3, #6
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f063 030f 	orn	r3, r3, #15
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]
}
 80025bc:	e011      	b.n	80025e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10d      	bne.n	80025e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	11db      	asrs	r3, r3, #7
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 0306 	and.w	r3, r3, #6
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f063 030e 	orn	r3, r3, #14
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <I2C_Master_ADD10+0x26>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d108      	bne.n	8002626 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <I2C_Master_ADD10+0x48>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002634:	605a      	str	r2, [r3, #4]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002642:	b480      	push	{r7}
 8002644:	b091      	sub	sp, #68	; 0x44
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b22      	cmp	r3, #34	; 0x22
 800266a:	f040 8169 	bne.w	8002940 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <I2C_Master_ADDR+0x54>
 8002676:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d10b      	bne.n	8002696 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	e160      	b.n	8002958 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11d      	bne.n	80026da <I2C_Master_ADDR+0x98>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026a6:	d118      	bne.n	80026da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	651a      	str	r2, [r3, #80]	; 0x50
 80026d8:	e13e      	b.n	8002958 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d113      	bne.n	800270c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e115      	b.n	8002938 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	f040 808a 	bne.w	800282c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800271e:	d137      	bne.n	8002790 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800273e:	d113      	bne.n	8002768 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	e0e7      	b.n	8002938 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e0d3      	b.n	8002938 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	2b08      	cmp	r3, #8
 8002794:	d02e      	beq.n	80027f4 <I2C_Master_ADDR+0x1b2>
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	2b20      	cmp	r3, #32
 800279a:	d02b      	beq.n	80027f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d102      	bne.n	80027a8 <I2C_Master_ADDR+0x166>
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d125      	bne.n	80027f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00e      	beq.n	80027cc <I2C_Master_ADDR+0x18a>
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d00b      	beq.n	80027cc <I2C_Master_ADDR+0x18a>
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d008      	beq.n	80027cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e007      	b.n	80027dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	e0a1      	b.n	8002938 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002802:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e085      	b.n	8002938 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d14d      	bne.n	80028d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	2b04      	cmp	r3, #4
 800283a:	d016      	beq.n	800286a <I2C_Master_ADDR+0x228>
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	2b02      	cmp	r3, #2
 8002840:	d013      	beq.n	800286a <I2C_Master_ADDR+0x228>
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2b10      	cmp	r3, #16
 8002846:	d010      	beq.n	800286a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002856:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e007      	b.n	800287a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002888:	d117      	bne.n	80028ba <I2C_Master_ADDR+0x278>
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002890:	d00b      	beq.n	80028aa <I2C_Master_ADDR+0x268>
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	2b01      	cmp	r3, #1
 8002896:	d008      	beq.n	80028aa <I2C_Master_ADDR+0x268>
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	2b08      	cmp	r3, #8
 800289c:	d005      	beq.n	80028aa <I2C_Master_ADDR+0x268>
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d002      	beq.n	80028aa <I2C_Master_ADDR+0x268>
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d107      	bne.n	80028ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	e032      	b.n	8002938 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f0:	d117      	bne.n	8002922 <I2C_Master_ADDR+0x2e0>
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f8:	d00b      	beq.n	8002912 <I2C_Master_ADDR+0x2d0>
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d008      	beq.n	8002912 <I2C_Master_ADDR+0x2d0>
 8002900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002902:	2b08      	cmp	r3, #8
 8002904:	d005      	beq.n	8002912 <I2C_Master_ADDR+0x2d0>
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2b10      	cmp	r3, #16
 800290a:	d002      	beq.n	8002912 <I2C_Master_ADDR+0x2d0>
 800290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290e:	2b20      	cmp	r3, #32
 8002910:	d107      	bne.n	8002922 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002920:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800293e:	e00b      	b.n	8002958 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
}
 8002956:	e7ff      	b.n	8002958 <I2C_Master_ADDR+0x316>
 8002958:	bf00      	nop
 800295a:	3744      	adds	r7, #68	; 0x44
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d02b      	beq.n	80029d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d114      	bne.n	80029d6 <I2C_SlaveTransmit_TXE+0x72>
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b29      	cmp	r3, #41	; 0x29
 80029b0:	d111      	bne.n	80029d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2221      	movs	r2, #33	; 0x21
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2228      	movs	r2, #40	; 0x28
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff f9cb 	bl	8001d6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02c      	beq.n	8002a94 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d114      	bne.n	8002a94 <I2C_SlaveReceive_RXNE+0x74>
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a6e:	d111      	bne.n	8002a94 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2222      	movs	r2, #34	; 0x22
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2228      	movs	r2, #40	; 0x28
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff f976 	bl	8001d80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002afa:	2b28      	cmp	r3, #40	; 0x28
 8002afc:	d125      	bne.n	8002b4a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	81bb      	strh	r3, [r7, #12]
 8002b2c:	e002      	b.n	8002b34 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002b3c:	89ba      	ldrh	r2, [r7, #12]
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff f926 	bl	8001d94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b48:	e00e      	b.n	8002b68 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bcc:	d172      	bne.n	8002cb4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b22      	cmp	r3, #34	; 0x22
 8002bd2:	d002      	beq.n	8002bda <I2C_Slave_STOPF+0x6a>
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8002bd8:	d135      	bne.n	8002c46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f959 	bl	8000eca <HAL_DMA_GetState>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d049      	beq.n	8002cb2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	4a69      	ldr	r2, [pc, #420]	; (8002dc8 <I2C_Slave_STOPF+0x258>)
 8002c24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f92b 	bl	8000e86 <HAL_DMA_Abort_IT>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03d      	beq.n	8002cb2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c40:	4610      	mov	r0, r2
 8002c42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c44:	e035      	b.n	8002cb2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0204 	orr.w	r2, r3, #4
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f923 	bl	8000eca <HAL_DMA_GetState>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d014      	beq.n	8002cb4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	4a4e      	ldr	r2, [pc, #312]	; (8002dc8 <I2C_Slave_STOPF+0x258>)
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f8f5 	bl	8000e86 <HAL_DMA_Abort_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cac:	4610      	mov	r0, r2
 8002cae:	4798      	blx	r3
 8002cb0:	e000      	b.n	8002cb4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cb2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d03e      	beq.n	8002d3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d112      	bne.n	8002cf2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d112      	bne.n	8002d26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8b7 	bl	8002eb8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002d4a:	e039      	b.n	8002dc0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d50:	d109      	bne.n	8002d66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2228      	movs	r2, #40	; 0x28
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff f80d 	bl	8001d80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b28      	cmp	r3, #40	; 0x28
 8002d70:	d111      	bne.n	8002d96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <I2C_Slave_STOPF+0x25c>)
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff f80e 	bl	8001db0 <HAL_I2C_ListenCpltCallback>
}
 8002d94:	e014      	b.n	8002dc0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	2b22      	cmp	r3, #34	; 0x22
 8002d9c:	d002      	beq.n	8002da4 <I2C_Slave_STOPF+0x234>
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b22      	cmp	r3, #34	; 0x22
 8002da2:	d10d      	bne.n	8002dc0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe ffe0 	bl	8001d80 <HAL_I2C_SlaveRxCpltCallback>
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	08003221 	.word	0x08003221
 8002dcc:	ffff0000 	.word	0xffff0000

08002dd0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d002      	beq.n	8002df2 <I2C_Slave_AF+0x22>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d129      	bne.n	8002e46 <I2C_Slave_AF+0x76>
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b28      	cmp	r3, #40	; 0x28
 8002df6:	d126      	bne.n	8002e46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <I2C_Slave_AF+0xe4>)
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe ffb6 	bl	8001db0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002e44:	e031      	b.n	8002eaa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b21      	cmp	r3, #33	; 0x21
 8002e4a:	d129      	bne.n	8002ea0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <I2C_Slave_AF+0xe4>)
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2221      	movs	r2, #33	; 0x21
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e90:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe fb22 	bl	80014dc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fe ff67 	bl	8001d6c <HAL_I2C_SlaveTxCpltCallback>
}
 8002e9e:	e004      	b.n	8002eaa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea8:	615a      	str	r2, [r3, #20]
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	ffff0000 	.word	0xffff0000

08002eb8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ece:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ed0:	7bbb      	ldrb	r3, [r7, #14]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d002      	beq.n	8002edc <I2C_ITError+0x24>
 8002ed6:	7bbb      	ldrb	r3, [r7, #14]
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d10a      	bne.n	8002ef2 <I2C_ITError+0x3a>
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b22      	cmp	r3, #34	; 0x22
 8002ee0:	d107      	bne.n	8002ef2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ef8:	2b28      	cmp	r3, #40	; 0x28
 8002efa:	d107      	bne.n	8002f0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2228      	movs	r2, #40	; 0x28
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f0a:	e015      	b.n	8002f38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f1a:	d00a      	beq.n	8002f32 <I2C_ITError+0x7a>
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b60      	cmp	r3, #96	; 0x60
 8002f20:	d007      	beq.n	8002f32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f46:	d162      	bne.n	800300e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d020      	beq.n	8002fa8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <I2C_ITError+0x25c>)
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd ff87 	bl	8000e86 <HAL_DMA_Abort_IT>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8089 	beq.w	8003092 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4798      	blx	r3
 8002fa6:	e074      	b.n	8003092 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	4a59      	ldr	r2, [pc, #356]	; (8003114 <I2C_ITError+0x25c>)
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd ff66 	bl	8000e86 <HAL_DMA_Abort_IT>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d068      	beq.n	8003092 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d10b      	bne.n	8002fe6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003008:	4610      	mov	r0, r2
 800300a:	4798      	blx	r3
 800300c:	e041      	b.n	8003092 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b60      	cmp	r3, #96	; 0x60
 8003018:	d125      	bne.n	8003066 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d10b      	bne.n	800304e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe fece 	bl	8001e00 <HAL_I2C_AbortCpltCallback>
 8003064:	e015      	b.n	8003092 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d10b      	bne.n	800308c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fe fead 	bl	8001dec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10e      	bne.n	80030c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d113      	bne.n	800310c <I2C_ITError+0x254>
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b28      	cmp	r3, #40	; 0x28
 80030e8:	d110      	bne.n	800310c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <I2C_ITError+0x260>)
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fe52 	bl	8001db0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	08003221 	.word	0x08003221
 8003118:	ffff0000 	.word	0xffff0000

0800311c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	460b      	mov	r3, r1
 800312a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d006      	beq.n	8003146 <I2C_MasterRequestWrite+0x2a>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d003      	beq.n	8003146 <I2C_MasterRequestWrite+0x2a>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003144:	d108      	bne.n	8003158 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e00b      	b.n	8003170 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	2b12      	cmp	r3, #18
 800315e:	d107      	bne.n	8003170 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f8f7 	bl	8003370 <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003196:	d103      	bne.n	80031a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e035      	b.n	8003210 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ac:	d108      	bne.n	80031c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031bc:	611a      	str	r2, [r3, #16]
 80031be:	e01b      	b.n	80031f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031c0:	897b      	ldrh	r3, [r7, #10]
 80031c2:	11db      	asrs	r3, r3, #7
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 0306 	and.w	r3, r3, #6
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f063 030f 	orn	r3, r3, #15
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <I2C_MasterRequestWrite+0xfc>)
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f940 	bl	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e010      	b.n	8003210 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <I2C_MasterRequestWrite+0x100>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f930 	bl	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00010008 	.word	0x00010008
 800321c:	00010002 	.word	0x00010002

08003220 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800323a:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <I2C_DMAAbort+0x148>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	08db      	lsrs	r3, r3, #3
 8003240:	4a4a      	ldr	r2, [pc, #296]	; (800336c <I2C_DMAAbort+0x14c>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0a1a      	lsrs	r2, r3, #8
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00da      	lsls	r2, r3, #3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003266:	e00a      	b.n	800327e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3b01      	subs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327c:	d0ea      	beq.n	8003254 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2200      	movs	r2, #0
 800328c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	2200      	movs	r2, #0
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	2200      	movs	r2, #0
 80032c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	2200      	movs	r2, #0
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d10e      	bne.n	800330e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7fe fd7a 	bl	8001e00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800330c:	e027      	b.n	800335e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003314:	2b28      	cmp	r3, #40	; 0x28
 8003316:	d117      	bne.n	8003348 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003336:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2228      	movs	r2, #40	; 0x28
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003346:	e007      	b.n	8003358 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003358:	6978      	ldr	r0, [r7, #20]
 800335a:	f7fe fd47 	bl	8001dec <HAL_I2C_ErrorCallback>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000
 800336c:	14f8b589 	.word	0x14f8b589

08003370 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003380:	e048      	b.n	8003414 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d044      	beq.n	8003414 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fd fc3b 	bl	8000c04 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d139      	bne.n	8003414 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d10d      	bne.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	43da      	mvns	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4013      	ands	r3, r2
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	e00c      	b.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d116      	bne.n	8003414 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e023      	b.n	800345c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	0c1b      	lsrs	r3, r3, #16
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10d      	bne.n	800343a <I2C_WaitOnFlagUntilTimeout+0xca>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	43da      	mvns	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	e00c      	b.n	8003454 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	429a      	cmp	r2, r3
 8003458:	d093      	beq.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003472:	e071      	b.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d123      	bne.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003492:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800349c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f043 0204 	orr.w	r2, r3, #4
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e067      	b.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d041      	beq.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d4:	f7fd fb96 	bl	8000c04 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d302      	bcc.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d136      	bne.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10c      	bne.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e00b      	b.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e021      	b.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10c      	bne.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	43da      	mvns	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e00b      	b.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	bf14      	ite	ne
 800358e:	2301      	movne	r3, #1
 8003590:	2300      	moveq	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af6d 	bne.w	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b0:	e034      	b.n	800361c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f8b8 	bl	8003728 <I2C_IsAcknowledgeFailed>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e034      	b.n	800362c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d028      	beq.n	800361c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fd fb1b 	bl	8000c04 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11d      	bne.n	800361c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d016      	beq.n	800361c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e007      	b.n	800362c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d1c3      	bne.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003640:	e034      	b.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f870 	bl	8003728 <I2C_IsAcknowledgeFailed>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e034      	b.n	80036bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d028      	beq.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fd fad3 	bl	8000c04 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d11d      	bne.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d016      	beq.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e007      	b.n	80036bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d1c3      	bne.n	8003642 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	0a1a      	lsrs	r2, r3, #8
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e008      	b.n	8003714 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003710:	d0e9      	beq.n	80036e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	20000000 	.word	0x20000000
 8003724:	14f8b589 	.word	0x14f8b589

08003728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d11b      	bne.n	8003778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003796:	d103      	bne.n	80037a0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800379e:	e007      	b.n	80037b0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80037a8:	d102      	bne.n	80037b0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2208      	movs	r2, #8
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e267      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d075      	beq.n	80038c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	4b88      	ldr	r3, [pc, #544]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d00c      	beq.n	8003800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b85      	ldr	r3, [pc, #532]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d112      	bne.n	8003818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b82      	ldr	r3, [pc, #520]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d05b      	beq.n	80038c4 <HAL_RCC_OscConfig+0x108>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d157      	bne.n	80038c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e242      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003820:	d106      	bne.n	8003830 <HAL_RCC_OscConfig+0x74>
 8003822:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a75      	ldr	r2, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e01d      	b.n	800386c <HAL_RCC_OscConfig+0xb0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x98>
 800383a:	4b70      	ldr	r3, [pc, #448]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6f      	ldr	r2, [pc, #444]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6c      	ldr	r2, [pc, #432]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xb0>
 8003854:	4b69      	ldr	r3, [pc, #420]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a68      	ldr	r2, [pc, #416]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fd f9c6 	bl	8000c04 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387c:	f7fd f9c2 	bl	8000c04 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e207      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b5b      	ldr	r3, [pc, #364]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0xc0>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fd f9b2 	bl	8000c04 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fd f9ae 	bl	8000c04 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1f3      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0xe8>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d063      	beq.n	800399a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d11c      	bne.n	8003924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b44      	ldr	r3, [pc, #272]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d116      	bne.n	8003924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_RCC_OscConfig+0x152>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e1c7      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4937      	ldr	r1, [pc, #220]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	e03a      	b.n	800399a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <HAL_RCC_OscConfig+0x244>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd f967 	bl	8000c04 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393a:	f7fd f963 	bl	8000c04 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e1a8      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b28      	ldr	r3, [pc, #160]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4925      	ldr	r1, [pc, #148]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
 800396c:	e015      	b.n	800399a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCC_OscConfig+0x244>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd f946 	bl	8000c04 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397c:	f7fd f942 	bl	8000c04 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e187      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d036      	beq.n	8003a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d016      	beq.n	80039dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RCC_OscConfig+0x248>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd f926 	bl	8000c04 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fd f922 	bl	8000c04 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e167      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_OscConfig+0x240>)
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x200>
 80039da:	e01b      	b.n	8003a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_OscConfig+0x248>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e2:	f7fd f90f 	bl	8000c04 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	e00e      	b.n	8003a08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fd f90b 	bl	8000c04 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d907      	bls.n	8003a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e150      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
 80039fc:	40023800 	.word	0x40023800
 8003a00:	42470000 	.word	0x42470000
 8003a04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1ea      	bne.n	80039ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8097 	beq.w	8003b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a26:	4b81      	ldr	r3, [pc, #516]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a7c      	ldr	r2, [pc, #496]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b7a      	ldr	r3, [pc, #488]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	4b77      	ldr	r3, [pc, #476]	; (8003c30 <HAL_RCC_OscConfig+0x474>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d118      	bne.n	8003a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5e:	4b74      	ldr	r3, [pc, #464]	; (8003c30 <HAL_RCC_OscConfig+0x474>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a73      	ldr	r2, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x474>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7fd f8cb 	bl	8000c04 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fd f8c7 	bl	8000c04 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e10c      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b6a      	ldr	r3, [pc, #424]	; (8003c30 <HAL_RCC_OscConfig+0x474>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2ea>
 8003a98:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	e01c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x324>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x30c>
 8003aae:	4b5f      	ldr	r3, [pc, #380]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a5e      	ldr	r2, [pc, #376]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aba:	4b5c      	ldr	r3, [pc, #368]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a5b      	ldr	r2, [pc, #364]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x324>
 8003ac8:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a54      	ldr	r2, [pc, #336]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003ada:	f023 0304 	bic.w	r3, r3, #4
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f88c 	bl	8000c04 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd f888 	bl	8000c04 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0cb      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ee      	beq.n	8003af0 <HAL_RCC_OscConfig+0x334>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b14:	f7fd f876 	bl	8000c04 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd f872 	bl	8000c04 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e0b5      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b32:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ee      	bne.n	8003b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80a1 	beq.w	8003c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b5a:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d05c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d141      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCC_OscConfig+0x478>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fd f846 	bl	8000c04 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fd f842 	bl	8000c04 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e087      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	019b      	lsls	r3, r3, #6
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	491b      	ldr	r1, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x478>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fd f81b 	bl	8000c04 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fd f817 	bl	8000c04 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e05c      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x416>
 8003bf0:	e054      	b.n	8003c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <HAL_RCC_OscConfig+0x478>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fd f804 	bl	8000c04 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fd f800 	bl	8000c04 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e045      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_OscConfig+0x470>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x444>
 8003c1e:	e03d      	b.n	8003c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e038      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40007000 	.word	0x40007000
 8003c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c38:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x4ec>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d028      	beq.n	8003c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d121      	bne.n	8003c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d11a      	bne.n	8003c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d111      	bne.n	8003c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	3b01      	subs	r3, #1
 8003c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d107      	bne.n	8003c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800

08003cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0cc      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b68      	ldr	r3, [pc, #416]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d90c      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0b8      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a58      	ldr	r2, [pc, #352]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d18:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d044      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d119      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e07f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d003      	beq.n	8003d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e06f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e067      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8a:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4934      	ldr	r1, [pc, #208]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d9c:	f7fc ff32 	bl	8000c04 <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da4:	f7fc ff2e 	bl	8000c04 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e04f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 020c 	and.w	r2, r3, #12
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1eb      	bne.n	8003da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d20c      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e032      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4916      	ldr	r1, [pc, #88]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	490e      	ldr	r1, [pc, #56]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e32:	f000 f821 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	490a      	ldr	r1, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fe92 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023c00 	.word	0x40023c00
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	08004a34 	.word	0x08004a34
 8003e70:	20000000 	.word	0x20000000
 8003e74:	20000004 	.word	0x20000004

08003e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e7c:	b094      	sub	sp, #80	; 0x50
 8003e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	647b      	str	r3, [r7, #68]	; 0x44
 8003e84:	2300      	movs	r3, #0
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e88:	2300      	movs	r3, #0
 8003e8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e90:	4b79      	ldr	r3, [pc, #484]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	f200 80e1 	bhi.w	8004064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x34>
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eaa:	e0db      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <HAL_RCC_GetSysClockFreq+0x204>)
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003eb0:	e0db      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eb2:	4b73      	ldr	r3, [pc, #460]	; (8004080 <HAL_RCC_GetSysClockFreq+0x208>)
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb6:	e0d8      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ece:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eea:	4622      	mov	r2, r4
 8003eec:	462b      	mov	r3, r5
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	0159      	lsls	r1, r3, #5
 8003ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003efc:	0150      	lsls	r0, r2, #5
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4621      	mov	r1, r4
 8003f04:	1a51      	subs	r1, r2, r1
 8003f06:	6139      	str	r1, [r7, #16]
 8003f08:	4629      	mov	r1, r5
 8003f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	018b      	lsls	r3, r1, #6
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f26:	4651      	mov	r1, sl
 8003f28:	018a      	lsls	r2, r1, #6
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f30:	4659      	mov	r1, fp
 8003f32:	eb63 0901 	sbc.w	r9, r3, r1
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f4a:	4690      	mov	r8, r2
 8003f4c:	4699      	mov	r9, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	eb18 0303 	adds.w	r3, r8, r3
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	462b      	mov	r3, r5
 8003f58:	eb49 0303 	adc.w	r3, r9, r3
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	024b      	lsls	r3, r1, #9
 8003f6e:	4621      	mov	r1, r4
 8003f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f74:	4621      	mov	r1, r4
 8003f76:	024a      	lsls	r2, r1, #9
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7e:	2200      	movs	r2, #0
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f88:	f7fc f91e 	bl	80001c8 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f94:	e058      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f96:	4b38      	ldr	r3, [pc, #224]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc2:	0150      	lsls	r0, r2, #5
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4641      	mov	r1, r8
 8003fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fce:	4649      	mov	r1, r9
 8003fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fec:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	00eb      	lsls	r3, r5, #3
 8003ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffe:	00e2      	lsls	r2, r4, #3
 8004000:	4614      	mov	r4, r2
 8004002:	461d      	mov	r5, r3
 8004004:	4643      	mov	r3, r8
 8004006:	18e3      	adds	r3, r4, r3
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	464b      	mov	r3, r9
 800400c:	eb45 0303 	adc.w	r3, r5, r3
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401e:	4629      	mov	r1, r5
 8004020:	028b      	lsls	r3, r1, #10
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004028:	4621      	mov	r1, r4
 800402a:	028a      	lsls	r2, r1, #10
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	2200      	movs	r2, #0
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	61fa      	str	r2, [r7, #28]
 8004038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403c:	f7fc f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4613      	mov	r3, r2
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800405a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004062:	e002      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetSysClockFreq+0x204>)
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800406c:	4618      	mov	r0, r3
 800406e:	3750      	adds	r7, #80	; 0x50
 8004070:	46bd      	mov	sp, r7
 8004072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800
 800407c:	00f42400 	.word	0x00f42400
 8004080:	007a1200 	.word	0x007a1200

08004084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_RCC_GetHCLKFreq+0x14>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000000 	.word	0x20000000

0800409c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040a0:	f7ff fff0 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0a9b      	lsrs	r3, r3, #10
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4903      	ldr	r1, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	08004a44 	.word	0x08004a44

080040c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e041      	b.n	800415a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc fc36 	bl	800095c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f000 fa88 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d001      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e04e      	b.n	800421a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <HAL_TIM_Base_Start_IT+0xc4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d022      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x80>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d01d      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x80>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_TIM_Base_Start_IT+0xc8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d018      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x80>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <HAL_TIM_Base_Start_IT+0xcc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x80>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <HAL_TIM_Base_Start_IT+0xd0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x80>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_TIM_Base_Start_IT+0xd4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x80>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_TIM_Base_Start_IT+0xd8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x80>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_Base_Start_IT+0xdc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d111      	bne.n	8004208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b06      	cmp	r3, #6
 80041f4:	d010      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	e007      	b.n	8004218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40010400 	.word	0x40010400
 800423c:	40014000 	.word	0x40014000
 8004240:	40001800 	.word	0x40001800

08004244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d020      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01b      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0202 	mvn.w	r2, #2
 8004278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9a3 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f995 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9a6 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d020      	beq.n	80042f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01b      	beq.n	80042f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0204 	mvn.w	r2, #4
 80042c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f97d 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f96f 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f980 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d020      	beq.n	8004340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01b      	beq.n	8004340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0208 	mvn.w	r2, #8
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f957 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f949 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f95a 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d020      	beq.n	800438c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01b      	beq.n	800438c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0210 	mvn.w	r2, #16
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2208      	movs	r2, #8
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f931 	bl	80045da <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f923 	bl	80045c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f934 	bl	80045ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0201 	mvn.w	r2, #1
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f901 	bl	80045b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 faee 	bl	80049b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f905 	bl	8004602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0220 	mvn.w	r2, #32
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fac0 	bl	800499c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIM_ConfigClockSource+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e0b4      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x186>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800445e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d03e      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0xd4>
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	f200 8087 	bhi.w	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	f000 8086 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x172>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d87f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b70      	cmp	r3, #112	; 0x70
 8004492:	d01a      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0xa6>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d87b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b60      	cmp	r3, #96	; 0x60
 800449a:	d050      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x11a>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d877      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b50      	cmp	r3, #80	; 0x50
 80044a2:	d03c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xfa>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d873      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d058      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x13a>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d86f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b30      	cmp	r3, #48	; 0x30
 80044b2:	d064      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d86b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d060      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d867      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05c      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d05a      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	e062      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044da:	f000 f9c3 	bl	8004864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
      break;
 80044f6:	e04f      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004508:	f000 f9ac 	bl	8004864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451a:	609a      	str	r2, [r3, #8]
      break;
 800451c:	e03c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	461a      	mov	r2, r3
 800452c:	f000 f920 	bl	8004770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2150      	movs	r1, #80	; 0x50
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f979 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 800453c:	e02c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800454a:	461a      	mov	r2, r3
 800454c:	f000 f93f 	bl	80047ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2160      	movs	r1, #96	; 0x60
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f969 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 800455c:	e01c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	461a      	mov	r2, r3
 800456c:	f000 f900 	bl	8004770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2140      	movs	r1, #64	; 0x40
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f959 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 800457c:	e00c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f000 f950 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 800458e:	e003      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e000      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a46      	ldr	r2, [pc, #280]	; (8004744 <TIM_Base_SetConfig+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d00f      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a43      	ldr	r2, [pc, #268]	; (8004748 <TIM_Base_SetConfig+0x130>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a42      	ldr	r2, [pc, #264]	; (800474c <TIM_Base_SetConfig+0x134>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a41      	ldr	r2, [pc, #260]	; (8004750 <TIM_Base_SetConfig+0x138>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a40      	ldr	r2, [pc, #256]	; (8004754 <TIM_Base_SetConfig+0x13c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d108      	bne.n	800466a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a35      	ldr	r2, [pc, #212]	; (8004744 <TIM_Base_SetConfig+0x12c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d027      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a32      	ldr	r2, [pc, #200]	; (8004748 <TIM_Base_SetConfig+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d023      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <TIM_Base_SetConfig+0x134>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a30      	ldr	r2, [pc, #192]	; (8004750 <TIM_Base_SetConfig+0x138>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <TIM_Base_SetConfig+0x13c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d017      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <TIM_Base_SetConfig+0x140>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2d      	ldr	r2, [pc, #180]	; (800475c <TIM_Base_SetConfig+0x144>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	; (8004760 <TIM_Base_SetConfig+0x148>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <TIM_Base_SetConfig+0x14c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2a      	ldr	r2, [pc, #168]	; (8004768 <TIM_Base_SetConfig+0x150>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a29      	ldr	r2, [pc, #164]	; (800476c <TIM_Base_SetConfig+0x154>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d108      	bne.n	80046dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a10      	ldr	r2, [pc, #64]	; (8004744 <TIM_Base_SetConfig+0x12c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xf8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a12      	ldr	r2, [pc, #72]	; (8004754 <TIM_Base_SetConfig+0x13c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	611a      	str	r2, [r3, #16]
  }
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40010400 	.word	0x40010400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800
 8004764:	40001800 	.word	0x40001800
 8004768:	40001c00 	.word	0x40001c00
 800476c:	40002000 	.word	0x40002000

08004770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f023 0201 	bic.w	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800479a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f023 030a 	bic.w	r3, r3, #10
 80047ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f023 0210 	bic.w	r2, r3, #16
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	031b      	lsls	r3, r3, #12
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800480a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	f043 0307 	orr.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	431a      	orrs	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e05a      	b.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a21      	ldr	r2, [pc, #132]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d022      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d01d      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d018      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1a      	ldr	r2, [pc, #104]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a17      	ldr	r2, [pc, #92]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a15      	ldr	r2, [pc, #84]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d10c      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4313      	orrs	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40000c00 	.word	0x40000c00
 8004990:	40010400 	.word	0x40010400
 8004994:	40014000 	.word	0x40014000
 8004998:	40001800 	.word	0x40001800

0800499c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <memset>:
 80049c4:	4402      	add	r2, r0
 80049c6:	4603      	mov	r3, r0
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d100      	bne.n	80049ce <memset+0xa>
 80049cc:	4770      	bx	lr
 80049ce:	f803 1b01 	strb.w	r1, [r3], #1
 80049d2:	e7f9      	b.n	80049c8 <memset+0x4>

080049d4 <__libc_init_array>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	4d0d      	ldr	r5, [pc, #52]	; (8004a0c <__libc_init_array+0x38>)
 80049d8:	4c0d      	ldr	r4, [pc, #52]	; (8004a10 <__libc_init_array+0x3c>)
 80049da:	1b64      	subs	r4, r4, r5
 80049dc:	10a4      	asrs	r4, r4, #2
 80049de:	2600      	movs	r6, #0
 80049e0:	42a6      	cmp	r6, r4
 80049e2:	d109      	bne.n	80049f8 <__libc_init_array+0x24>
 80049e4:	4d0b      	ldr	r5, [pc, #44]	; (8004a14 <__libc_init_array+0x40>)
 80049e6:	4c0c      	ldr	r4, [pc, #48]	; (8004a18 <__libc_init_array+0x44>)
 80049e8:	f000 f818 	bl	8004a1c <_init>
 80049ec:	1b64      	subs	r4, r4, r5
 80049ee:	10a4      	asrs	r4, r4, #2
 80049f0:	2600      	movs	r6, #0
 80049f2:	42a6      	cmp	r6, r4
 80049f4:	d105      	bne.n	8004a02 <__libc_init_array+0x2e>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fc:	4798      	blx	r3
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7ee      	b.n	80049e0 <__libc_init_array+0xc>
 8004a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a06:	4798      	blx	r3
 8004a08:	3601      	adds	r6, #1
 8004a0a:	e7f2      	b.n	80049f2 <__libc_init_array+0x1e>
 8004a0c:	08004a54 	.word	0x08004a54
 8004a10:	08004a54 	.word	0x08004a54
 8004a14:	08004a54 	.word	0x08004a54
 8004a18:	08004a58 	.word	0x08004a58

08004a1c <_init>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

08004a28 <_fini>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr
